<?xml version="1.0" encoding="ISO-8859-1" standalone="no"?>
<web-servers>
        <web-server name="default">
		<!-- This section enables HTTP type clients for this Web Server -->
		<client-service name="client" debug="true">
			<!-- How long to wait before notification of possible loss of message. 
				This is for HTTP Clients -->
			<message-sequence-timeout>4s</message-sequence-timeout>
			<!-- This is used to control access from client web socket to diffusion. 
				This is a REGEX pattern that will match the origin of the request (.*) matches 
				anything so all requests are allowed -->
			<websocket-origin>.*</websocket-origin>
			<!-- This is used to control cross-origin resource sharing client connection to Diffusion
				This is a REGEX pattern that will match the origin of the request (.*) matches anything -->
			<cors-origin>.*</cors-origin>
			<!-- For Diffusion client requests, obey keep alive header or close all 
				request -->
			<close-callback-requests>false</close-callback-requests>
			<!-- Enable compression for HTTP responses (Client and File). If the response 
				is bigger than threshold -->
			<compression-threshold>256</compression-threshold>
		</client-service>

		<!-- This is an example HTTP Service, should be removed, if not required -->
		<http-service name="rest-service" debug="true">
			<class>com.pushtechnology.diffusion.service.RESTService</class>
			<url-pattern>^/rest/.*</url-pattern>
		</http-service>
		
		<!-- This service provides a URL to which you can deploy, redeploy or undeploy publishers.
		     POST: Body contains a DAR file for deployment
		     PUT: Body contains a DAR file for redeployment
		     DELETE: URL contains the name of a publisher for undeployment (/deploy/name-of-publisher)
		  -->
		<http-service name="deploy-service" debug="true">
			<class>com.pushtechnology.diffusion.service.DeploymentService</class>
			<url-pattern>^/deploy.*</url-pattern>
			<max-inbound-request-size>128m</max-inbound-request-size>
		</http-service>
		
		<!-- This section enables file requests for this Web Server -->
		<file-service name="files">
			<!-- Virtual hosts are processed in order of entry, note the host entry 
				below will match all hosts -->
			<virtual-host name="default" debug="false">
				<!-- This is the regex expression for host matching -->
				<host>.*</host>
				<document-root>../html</document-root>
				<!-- The default home page, this file is used with directory browsing -->
				<home-page>index.html</home-page>
				<!-- This is used to control the 404 response. The server will look for 
					one of this files in the directory of the request, if the file does not exist 
					then it will look for this file in the virtual directory. If left blank or 
					the file doesn't exist a standard 404 response HTML document will be sent. -->
				<error-page>error.html</error-page>
				<!-- Minify html. This will happen before the file is compressed. -->
				<minify>true</minify>

				<cache>
					<!-- If the file to be served is over this size, then do not cache the 
						entire contents, but map the file instead. -->
					<file-size-limit>1m</file-size-limit>
					<!-- Total size of the cache for this context. -->
					<cache-size-limit>10m</cache-size-limit>
					<!-- If the file has not been accessed within the time specified then 
						remove the entry from the cache. -->
					<file-life-time>1d</file-life-time>
				</cache>
				<!-- Use an alias file, this allows for URL aliasing if required -->
				<alias-file>../etc/Aliases.xml</alias-file>
			</virtual-host>
		</file-service>

	</web-server>
</web-servers>
